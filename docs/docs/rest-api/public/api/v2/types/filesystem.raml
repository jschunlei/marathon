#%RAML 1.0 Library
uses:
  artifacts: artifact.raml
  constraints: constraint.raml
  label: label.raml
  strings: stringTypes.raml
  pragma: pragma.raml
types:
  Volume:
    type: object
    properties:
      name:
        type: strings.Name
        description: The name of the volume to reference.
      host?:
        type: string
        description: |
          Absolute path of the file or directory on the agent, or else the relative
          path of the directory in the executor's sandbox.
          Host volumes are useful for mapping directories that exist on the agent apriori,
          or within the executor sandbox. No resources (Mesos or otherwise) are allocated for
          these types of volumes.
  VolumeMount:
    type: object
    properties:
      readOnly?:
        type: boolean
      volume?:
        type: strings.Name
        description: Refers to some declared volume of the app or pod.
  ImageType:
    type: string
    enum: [DOCKER, APPC]
  Image:
    type: object
    description: The filesystem image to populate the container with
    properties:
      kind: ImageType
      id:
        type: strings.Path
        description: address/identifier of the file system image
        example: mesosphere/marathon:1.3.0
      forcePull?:
        type: boolean
        description: true if the image should always be pulled
      labels?:
        type: label.KVLabels
        (pragma.omitEmpty):
        description: Labels for APPC images.
  FsObject:
    type: object
    description: |
      At runtime volumes and/or files may be injected automatically into a container by the
      container engine.
    properties:
      path?:
        type: strings.Path
        description: The path inside the container at which the object is bound.
      artifact?: artifacts.FsArtifact
      volume?: VolumeMount
  Filesystem:
    type: object
    properties:
      image?:
        type: Image
        (pragma.omitEmpty):
      objects?:
        type: array
        (pragma.omitEmpty):
        description: All filesystem objects used by the container.
        items: FsObject
        uniqueItems: true
  PersistentVolumeType:
    type: string
    description: The type of mesos disk resource to use; defaults to root
    enum: [ root, path, mount ]
  PersistentVolume:
    type: object
    properties:
      type?:
        type: PersistentVolumeType
      size:
        type: integer
        format: int64
        minimum: 0
        description: The size of the persistence volume in MB.
      maxSize?:
        type: integer
        format: int64
        minimum: 0
        description: |
          For `mount` mesos disk resources, the optional maximum size of an exclusive mount volume to be considered.
      constraints?:
        type: constraints.VolumeConstraint[]
        description: |
          Constraints restricting where new persistent volumes should be created.
          Currently, it is only possible to constrain the path of the disk resource by regular expression.
        uniqueItems: true
  ExternalVolume:
    type: object
    properties:
      size?:
        type: integer
        format: int64
        description: The size of the external volume in MB
      name?:
        type: string
        description: The name of the volume
      provider?:
        type: string
        description: The name of the volume provider
      options?:
        type: label.KVLabels
        (pragma.omitEmpty):
        description: Provider specific volume configuration options
  AppVolume:
    type: object
    properties:
      containerPath:
        type: string
        minLength: 1
        description: The path of the volume in the container
      hostPath?:
        type: string
        minLength: 1
        description: The path of the volume on the host
      persistent?: PersistentVolume
      external?: ExternalVolume
      mode:
        type: strings.ReadMode
        description: Possible values are RO for ReadOnly and RW for Read/Write
